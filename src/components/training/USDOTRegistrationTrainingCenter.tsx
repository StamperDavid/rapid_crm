/**
 * USDOT RPA Training Center
 * Complete FMCSA-style training environment for USDOT RPA Agent
 * 
 * Features:
 * - Loads scenarios from database (generated by Alex Training)
 * - Watches RPA auto-fill forms step-by-step
 * - Pixel-perfect FMCSA government website styling
 * - Review/correction interface like Alex Training Center
 * - Field-by-field accuracy tracking
 */

import React, { useState, useEffect, useRef } from 'react';
import { 
  CheckCircleIcon, 
  XCircleIcon, 
  ClockIcon, 
  ChartBarIcon,
  PlayIcon,
  PauseIcon,
  RefreshIcon,
  DocumentTextIcon,
  ExclamationIcon,
  ArrowRightIcon,
  ArrowLeftIcon,
  InformationCircleIcon,
  EyeIcon,
  PencilIcon,
  ThumbUpIcon,
  ThumbDownIcon,
  FastForwardIcon
} from '@heroicons/react/outline';
import type { USDOTApplicationScenario } from '../../services/training/ScenarioGenerator';

interface USDOTApplicationData {
  // Step 1: 3rd Party Service Provider
  isThirdPartyProvider: string;
  
  // Step 2: Business Information
  legalBusinessName: string;
  dbaName: string;
  principalAddressSame: string;
  principalAddress: {
    country: string;
    street: string;
    city: string;
    state: string;
    zip: string;
  };
  mailingAddress: {
    country: string;
    street: string;
    city: string;
    state: string;
    zip: string;
  };
  phone: string;
  ein: string;
  isGovernmentUnit: string;
  formOfBusiness: string;
  ownershipControl: string;
  
  // Step 3: Company Contact
  contactFirstName: string;
  contactMiddleName: string;
  contactLastName: string;
  contactSuffix: string;
  contactTitle: string;
  contactEmail: string;
  contactPhone: string;
  contactAddress: {
    country: string;
    street: string;
    city: string;
    state: string;
    zip: string;
  };
  
  // Step 4: Operations
  intermodalEquipmentProvider: string;
  transportProperty: string;
  receiveCompensation: string;
  propertyType: string;
  interstateCommerce: string;
  transportOwnProperty: string;
  transportPassengers: string;
  brokerServices: string;
  freightForwarder: string;
  cargoTankFacility: string;
  driveaway: string;
  towaway: string;
  cargoClassifications: string[];
  
  // Step 5: Vehicle Summary
  nonCMVProperty: string;
  ownedVehicles: {
    straightTrucks: string;
    truckTractors: string;
    trailers: string;
    iepTrailerChassis: string;
  };
  termLeasedVehicles: {
    straightTrucks: string;
    truckTractors: string;
    trailers: string;
    iepTrailerChassis: string;
  };
  tripLeasedVehicles: {
    straightTrucks: string;
    truckTractors: string;
    trailers: string;
    iepTrailerChassis: string;
  };
  towDriveawayVehicles: {
    straightTrucks: string;
    truckTractors: string;
    trailers: string;
    iepTrailerChassis: string;
  };
  canadaVehicles: string;
  mexicoVehicles: string;
  interstateVehicles: string;
  intrastateVehicles: string;
  
  // Step 6: Driver Summary
  interstateDrivers100Mile: string;
  interstateDriversBeyond100Mile: string;
  intrastateDrivers100Mile: string;
  intrastateDriversBeyond100Mile: string;
  cdlDrivers: string;
  canadaDrivers: string;
  mexicoDrivers: string;
  
  // Step 7: Affiliations
  hasAffiliations: string;
  
  // Step 8: Compliance Certifications
  complianceCertifications: {
    willingAble: string;
    produceDocuments: string;
    notDisqualified: string;
    processAgent: string;
    notSuspended: string;
    deficienciesCorrected: string;
  };
  
  // Step 9: Electronic Signature
  electronicSignature: string;
}

interface TrainingSession {
  id: string;
  agentId: string;
  startTime: Date;
  endTime?: Date;
  currentStep: number;
  totalSteps: number;
  score: number;
  mistakes: string[];
  completed: boolean;
  applicationData: Partial<USDOTApplicationData>;
  scenario?: USDOTApplicationScenario;
}

interface FieldComparison {
  fieldName: string;
  displayName: string;
  expected: any;
  actual: any;
  isCorrect: boolean | null; // null = not reviewed yet
  fieldPath: string;
  category: string; // 'business', 'contact', 'operations', 'vehicles', 'drivers', 'compliance'
}

const USDOTRegistrationTrainingCenter: React.FC = () => {
  const [trainingSession, setTrainingSession] = useState<TrainingSession | null>(null);
  const [currentScenario, setCurrentScenario] = useState<USDOTApplicationScenario | null>(null);
  const [isTraining, setIsTraining] = useState(false);
  const [isAutoFilling, setIsAutoFilling] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  const [applicationData, setApplicationData] = useState<Partial<USDOTApplicationData>>({});
  const [sessionHistory, setSessionHistory] = useState<TrainingSession[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [showReview, setShowReview] = useState(false);
  const [fieldComparisons, setFieldComparisons] = useState<FieldComparison[]>([]);
  const [reviewFeedback, setReviewFeedback] = useState('');
  const [agentId, setAgentId] = useState<string>('usdot_rpa_agent');
  const [autoFillSpeed, setAutoFillSpeed] = useState<'slow' | 'normal' | 'fast'>('normal');
  const [sessionStats, setSessionStats] = useState({
    totalScenarios: 0,
    completed: 0,
    averageAccuracy: 0
  });
  const [highlightedField, setHighlightedField] = useState<string>('');

  // Load session stats on mount
  useEffect(() => {
    loadSessionStats();
  }, []);

  const loadSessionStats = async () => {
    try {
      const response = await fetch('/api/usdot-rpa-training/stats');
      if (response.ok) {
        const data = await response.json();
        setSessionStats(data);
      }
    } catch (error) {
      console.error('Error loading session stats:', error);
      // Set default stats if endpoint doesn't exist yet
      setSessionStats({
        totalScenarios: 0,
        completed: 0,
        averageAccuracy: 0
      });
    }
  };

  // Load next scenario from database
  const loadNextScenario = async () => {
    try {
      const response = await fetch('/api/alex-training/next-scenario');
      if (response.ok) {
        const data = await response.json();
        if (data.scenario) {
          setCurrentScenario(data.scenario);
          return data.scenario;
        }
      }
    } catch (error) {
      console.error('Error loading scenario:', error);
    }
    return null;
  };

  // Map scenario data to USDOT form format
  const mapScenarioToFormData = (scenario: USDOTApplicationScenario): Partial<USDOTApplicationData> => {
    return {
      isThirdPartyProvider: 'No',
      legalBusinessName: scenario.legalBusinessName,
      dbaName: scenario.doingBusinessAs,
      principalAddressSame: scenario.principalAddressSameAsContact,
      principalAddress: {
        country: scenario.principalAddress.country,
        street: scenario.principalAddress.street,
        city: scenario.principalAddress.city,
        state: scenario.principalAddress.state,
        zip: scenario.principalAddress.postalCode
      },
      mailingAddress: {
        country: scenario.mailingAddress.country,
        street: scenario.mailingAddress.street,
        city: scenario.mailingAddress.city,
        state: scenario.mailingAddress.state,
        zip: scenario.mailingAddress.postalCode
      },
      phone: scenario.businessPhone,
      ein: scenario.ein,
      isGovernmentUnit: scenario.isUnitOfGovernment,
      formOfBusiness: scenario.formOfBusiness,
      ownershipControl: scenario.ownershipControl,
      contactFirstName: scenario.companyContact.firstName,
      contactMiddleName: scenario.companyContact.middleName,
      contactLastName: scenario.companyContact.lastName,
      contactSuffix: scenario.companyContact.suffix,
      contactTitle: scenario.companyContact.title,
      contactEmail: scenario.companyContact.email,
      contactPhone: scenario.companyContact.phone,
      contactAddress: {
        country: scenario.companyContact.address.country,
        street: scenario.companyContact.address.street,
        city: scenario.companyContact.address.city,
        state: scenario.companyContact.address.state,
        zip: scenario.companyContact.address.postalCode
      },
      intermodalEquipmentProvider: scenario.operateAsIntermodalEquipmentProvider,
      transportProperty: scenario.transportProperty,
      receiveCompensation: scenario.receiveCompensationForTransport,
      propertyType: scenario.propertyType,
      interstateCommerce: scenario.transportNonHazardousInterstate,
      transportOwnProperty: scenario.transportOwnProperty,
      transportPassengers: scenario.transportPassengers,
      brokerServices: scenario.provideBrokerServices,
      freightForwarder: scenario.provideFreightForwarderServices,
      cargoTankFacility: scenario.operateCargoTankFacility,
      driveaway: scenario.operateAsDriveaway,
      towaway: scenario.operateAsTowaway,
      cargoClassifications: scenario.cargoClassifications,
      nonCMVProperty: scenario.nonCMVProperty.toString(),
      ownedVehicles: {
        straightTrucks: scenario.vehicles.straightTrucks.owned.toString(),
        truckTractors: scenario.vehicles.truckTractors.owned.toString(),
        trailers: scenario.vehicles.trailers.owned.toString(),
        iepTrailerChassis: scenario.vehicles.iepTrailerChassis.owned.toString()
      },
      termLeasedVehicles: {
        straightTrucks: scenario.vehicles.straightTrucks.termLeased.toString(),
        truckTractors: scenario.vehicles.truckTractors.termLeased.toString(),
        trailers: scenario.vehicles.trailers.termLeased.toString(),
        iepTrailerChassis: scenario.vehicles.iepTrailerChassis.termLeased.toString()
      },
      tripLeasedVehicles: {
        straightTrucks: scenario.vehicles.straightTrucks.tripLeased.toString(),
        truckTractors: scenario.vehicles.truckTractors.tripLeased.toString(),
        trailers: scenario.vehicles.trailers.tripLeased.toString(),
        iepTrailerChassis: scenario.vehicles.iepTrailerChassis.tripLeased.toString()
      },
      towDriveawayVehicles: {
        straightTrucks: scenario.vehicles.straightTrucks.towDriveway.toString(),
        truckTractors: scenario.vehicles.truckTractors.towDriveway.toString(),
        trailers: scenario.vehicles.trailers.towDriveway.toString(),
        iepTrailerChassis: scenario.vehicles.iepTrailerChassis.towDriveway.toString()
      },
      canadaVehicles: scenario.vehiclesInCanada.toString(),
      mexicoVehicles: scenario.vehiclesInMexico.toString(),
      interstateVehicles: scenario.cmvInterstateOnly.toString(),
      intrastateVehicles: scenario.cmvIntrastateOnly.toString(),
      interstateDrivers100Mile: scenario.driversInterstate.within100Miles.toString(),
      interstateDriversBeyond100Mile: scenario.driversInterstate.beyond100Miles.toString(),
      intrastateDrivers100Mile: scenario.driversIntrastate.within100Miles.toString(),
      intrastateDriversBeyond100Mile: scenario.driversIntrastate.beyond100Miles.toString(),
      cdlDrivers: scenario.driversWithCDL.toString(),
      canadaDrivers: scenario.driversInCanada.toString(),
      mexicoDrivers: scenario.driversInMexico.toString(),
      hasAffiliations: scenario.hasAffiliations,
      complianceCertifications: {
        willingAble: scenario.certifyWillingAndAble,
        produceDocuments: scenario.certifyProduceDocuments,
        notDisqualified: scenario.certifyNotDisqualified,
        processAgent: scenario.certifyUnderstandProcessAgent,
        notSuspended: scenario.certifyNotUnderSuspension,
        deficienciesCorrected: scenario.certifyDeficienciesCorrected
      },
      electronicSignature: scenario.electronicSignature
    };
  };

  // Simulate RPA auto-filling fields with delay
  const autoFillField = async (fieldName: string, value: any, delay: number) => {
    setHighlightedField(fieldName);
    await new Promise(resolve => setTimeout(resolve, delay));
    setApplicationData(prev => ({
      ...prev,
      [fieldName]: value
    }));
    await new Promise(resolve => setTimeout(resolve, 200));
    setHighlightedField('');
  };

  // Auto-fill all steps automatically - COMPREHENSIVE FIELD MAPPING
  const autoFillAllSteps = async () => {
    if (!currentScenario) return;
    
    setIsAutoFilling(true);
    const formData = mapScenarioToFormData(currentScenario);
    const speed = autoFillSpeed === 'slow' ? 1000 : autoFillSpeed === 'normal' ? 500 : 200;

    // Step 1: 3rd Party Service Provider
    setCurrentStep(1);
    await autoFillField('isThirdPartyProvider', formData.isThirdPartyProvider, speed);
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Step 2: Business Information
    setCurrentStep(2);
    await autoFillField('legalBusinessName', formData.legalBusinessName, speed);
    await autoFillField('dbaName', formData.dbaName, speed);
    await autoFillField('principalAddressSame', formData.principalAddressSame, speed);
    await autoFillField('principalAddress', formData.principalAddress, speed);
    await autoFillField('mailingAddress', formData.mailingAddress, speed);
    await autoFillField('phone', formData.phone, speed);
    await autoFillField('ein', formData.ein, speed);
    await autoFillField('isGovernmentUnit', formData.isGovernmentUnit, speed);
    await autoFillField('formOfBusiness', formData.formOfBusiness, speed);
    await autoFillField('ownershipControl', formData.ownershipControl, speed);
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Step 3: Company Contact
    setCurrentStep(3);
    await autoFillField('contactFirstName', formData.contactFirstName, speed);
    await autoFillField('contactMiddleName', formData.contactMiddleName, speed);
    await autoFillField('contactLastName', formData.contactLastName, speed);
    await autoFillField('contactSuffix', formData.contactSuffix, speed);
    await autoFillField('contactTitle', formData.contactTitle, speed);
    await autoFillField('contactEmail', formData.contactEmail, speed);
    await autoFillField('contactPhone', formData.contactPhone, speed);
    await autoFillField('contactAddress', formData.contactAddress, speed);
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Step 4: Operations Classification
    setCurrentStep(4);
    await autoFillField('intermodalEquipmentProvider', formData.intermodalEquipmentProvider, speed);
    await autoFillField('transportProperty', formData.transportProperty, speed);
    await autoFillField('receiveCompensation', formData.receiveCompensation, speed);
    await autoFillField('propertyType', formData.propertyType, speed);
    await autoFillField('interstateCommerce', formData.interstateCommerce, speed);
    await autoFillField('transportOwnProperty', formData.transportOwnProperty, speed);
    await autoFillField('transportPassengers', formData.transportPassengers, speed);
    await autoFillField('brokerServices', formData.brokerServices, speed);
    await autoFillField('freightForwarder', formData.freightForwarder, speed);
    await autoFillField('cargoTankFacility', formData.cargoTankFacility, speed);
    await autoFillField('driveaway', formData.driveaway, speed);
    await autoFillField('towaway', formData.towaway, speed);
    await autoFillField('cargoClassifications', formData.cargoClassifications, speed);
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Step 5: Vehicle Summary
    setCurrentStep(5);
    await autoFillField('nonCMVProperty', formData.nonCMVProperty, speed);
    await autoFillField('ownedVehicles', formData.ownedVehicles, speed);
    await autoFillField('termLeasedVehicles', formData.termLeasedVehicles, speed);
    await autoFillField('tripLeasedVehicles', formData.tripLeasedVehicles, speed);
    await autoFillField('towDriveawayVehicles', formData.towDriveawayVehicles, speed);
    await autoFillField('canadaVehicles', formData.canadaVehicles, speed);
    await autoFillField('mexicoVehicles', formData.mexicoVehicles, speed);
    await autoFillField('interstateVehicles', formData.interstateVehicles, speed);
    await autoFillField('intrastateVehicles', formData.intrastateVehicles, speed);
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Step 6: Driver Summary
    setCurrentStep(6);
    await autoFillField('interstateDrivers100Mile', formData.interstateDrivers100Mile, speed);
    await autoFillField('interstateDriversBeyond100Mile', formData.interstateDriversBeyond100Mile, speed);
    await autoFillField('intrastateDrivers100Mile', formData.intrastateDrivers100Mile, speed);
    await autoFillField('intrastateDriversBeyond100Mile', formData.intrastateDriversBeyond100Mile, speed);
    await autoFillField('cdlDrivers', formData.cdlDrivers, speed);
    await autoFillField('canadaDrivers', formData.canadaDrivers, speed);
    await autoFillField('mexicoDrivers', formData.mexicoDrivers, speed);
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Step 7: Affiliations
    setCurrentStep(7);
    await autoFillField('hasAffiliations', formData.hasAffiliations, speed);
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Step 8: Compliance Certifications
    setCurrentStep(8);
    await autoFillField('complianceCertifications', formData.complianceCertifications, speed);
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Step 9: Electronic Signature
    setCurrentStep(9);
    await autoFillField('electronicSignature', formData.electronicSignature, speed);
    
    setIsAutoFilling(false);
    setShowReview(true);
    compareResults(formData);
  };

  // Compare RPA results with expected scenario data - comprehensive USDOT questions mapping
  const compareResults = (expectedData: Partial<USDOTApplicationData>) => {
    const comparisons: FieldComparison[] = [
      // Operation Classification Questions
      { fieldName: 'hasDunsBradstreet', displayName: 'Does the Applicant have a Dun and Bradstreet Number?', expected: currentScenario?.hasDunsBradstreet, actual: applicationData.isThirdPartyProvider, isCorrect: null, fieldPath: 'hasDunsBradstreet', category: 'operation_classification' },
      { fieldName: 'legalBusinessName', displayName: 'Legal Business Name', expected: expectedData.legalBusinessName, actual: applicationData.legalBusinessName, isCorrect: null, fieldPath: 'legalBusinessName', category: 'operation_classification' },
      { fieldName: 'dbaName', displayName: 'Doing Business As Name(s) (if different from Legal Business Name)', expected: expectedData.dbaName, actual: applicationData.dbaName, isCorrect: null, fieldPath: 'dbaName', category: 'operation_classification' },
      { fieldName: 'principalAddressSame', displayName: 'Is the Applicant\'s Principal Place of Business Address the same as the Application Contact\'s Address?', expected: expectedData.principalAddressSame, actual: applicationData.principalAddressSame, isCorrect: null, fieldPath: 'principalAddressSame', category: 'operation_classification' },
      { fieldName: 'principalAddress', displayName: 'Principal Place of Business Address', expected: expectedData.principalAddress, actual: applicationData.principalAddress, isCorrect: null, fieldPath: 'principalAddress', category: 'operation_classification' },
      { fieldName: 'mailingAddress', displayName: 'Mailing Address', expected: expectedData.mailingAddress, actual: applicationData.mailingAddress, isCorrect: null, fieldPath: 'mailingAddress', category: 'operation_classification' },
      { fieldName: 'phone', displayName: 'Principal Place of Business Telephone Number', expected: expectedData.phone, actual: applicationData.phone, isCorrect: null, fieldPath: 'phone', category: 'operation_classification' },
      { fieldName: 'ein', displayName: 'Employer Identification Number (EIN) or Social Security Number (SSN)', expected: expectedData.ein, actual: applicationData.ein, isCorrect: null, fieldPath: 'ein', category: 'operation_classification' },
      { fieldName: 'isGovernmentUnit', displayName: 'Is the Applicant a Unit of Government?', expected: expectedData.isGovernmentUnit, actual: applicationData.isGovernmentUnit, isCorrect: null, fieldPath: 'isGovernmentUnit', category: 'operation_classification' },
      { fieldName: 'formOfBusiness', displayName: 'Form of Business (Select the business form that applies)', expected: expectedData.formOfBusiness, actual: applicationData.formOfBusiness, isCorrect: null, fieldPath: 'formOfBusiness', category: 'operation_classification' },
      { fieldName: 'ownershipControl', displayName: 'Ownership and Control', expected: expectedData.ownershipControl, actual: applicationData.ownershipControl, isCorrect: null, fieldPath: 'ownershipControl', category: 'operation_classification' },
      
      // Company Contact Questions
      { fieldName: 'contactFirstName', displayName: 'Company Contact First Name', expected: expectedData.contactFirstName, actual: applicationData.contactFirstName, isCorrect: null, fieldPath: 'contactFirstName', category: 'company_contact' },
      { fieldName: 'contactMiddleName', displayName: 'Company Contact Middle Name', expected: expectedData.contactMiddleName, actual: applicationData.contactMiddleName, isCorrect: null, fieldPath: 'contactMiddleName', category: 'company_contact' },
      { fieldName: 'contactLastName', displayName: 'Company Contact Last Name', expected: expectedData.contactLastName, actual: applicationData.contactLastName, isCorrect: null, fieldPath: 'contactLastName', category: 'company_contact' },
      { fieldName: 'contactSuffix', displayName: 'Company Contact Suffix', expected: expectedData.contactSuffix, actual: applicationData.contactSuffix, isCorrect: null, fieldPath: 'contactSuffix', category: 'company_contact' },
      { fieldName: 'contactTitle', displayName: 'Company Official\'s Title', expected: expectedData.contactTitle, actual: applicationData.contactTitle, isCorrect: null, fieldPath: 'contactTitle', category: 'company_contact' },
      { fieldName: 'contactEmail', displayName: 'Company Contact Email', expected: expectedData.contactEmail, actual: applicationData.contactEmail, isCorrect: null, fieldPath: 'contactEmail', category: 'company_contact' },
      { fieldName: 'contactPhone', displayName: 'Company Contact Telephone Number', expected: expectedData.contactPhone, actual: applicationData.contactPhone, isCorrect: null, fieldPath: 'contactPhone', category: 'company_contact' },
      { fieldName: 'contactAddress', displayName: 'Company Contact Address', expected: expectedData.contactAddress, actual: applicationData.contactAddress, isCorrect: null, fieldPath: 'contactAddress', category: 'company_contact' },
      
      // Operation Type Questions
      { fieldName: 'intermodalEquipmentProvider', displayName: 'Will the Applicant operate as an Intermodal Equipment Provider?', expected: expectedData.intermodalEquipmentProvider, actual: applicationData.intermodalEquipmentProvider, isCorrect: null, fieldPath: 'intermodalEquipmentProvider', category: 'operation_type' },
      { fieldName: 'transportProperty', displayName: 'Will the Applicant transport Property?', expected: expectedData.transportProperty, actual: applicationData.transportProperty, isCorrect: null, fieldPath: 'transportProperty', category: 'operation_type' },
      { fieldName: 'receiveCompensation', displayName: 'Will the Applicant receive compensation for the business of transporting the property belonging to others?', expected: expectedData.receiveCompensation, actual: applicationData.receiveCompensation, isCorrect: null, fieldPath: 'receiveCompensation', category: 'operation_type' },
      { fieldName: 'propertyType', displayName: 'What type of Property will the Applicant transport?', expected: expectedData.propertyType, actual: applicationData.propertyType, isCorrect: null, fieldPath: 'propertyType', category: 'operation_type' },
      { fieldName: 'interstateCommerce', displayName: 'Will the Applicant transport Non-Hazardous Materials across state lines, otherwise known as Interstate Commerce?', expected: expectedData.interstateCommerce, actual: applicationData.interstateCommerce, isCorrect: null, fieldPath: 'interstateCommerce', category: 'operation_type' },
      { fieldName: 'transportOwnProperty', displayName: 'Will the Applicant transport their own property?', expected: expectedData.transportOwnProperty, actual: applicationData.transportOwnProperty, isCorrect: null, fieldPath: 'transportOwnProperty', category: 'operation_type' },
      { fieldName: 'transportPassengers', displayName: 'Will the Applicant transport any Passengers?', expected: expectedData.transportPassengers, actual: applicationData.transportPassengers, isCorrect: null, fieldPath: 'transportPassengers', category: 'operation_type' },
      { fieldName: 'brokerServices', displayName: 'Will the Applicant provide Property or Household Goods (HHG) Broker services?', expected: expectedData.brokerServices, actual: applicationData.brokerServices, isCorrect: null, fieldPath: 'brokerServices', category: 'operation_type' },
      { fieldName: 'freightForwarder', displayName: 'Will the Applicant provide Freight Forwarder services?', expected: expectedData.freightForwarder, actual: applicationData.freightForwarder, isCorrect: null, fieldPath: 'freightForwarder', category: 'operation_type' },
      { fieldName: 'cargoTankFacility', displayName: 'Will the Applicant operate a Cargo Tank Facility?', expected: expectedData.cargoTankFacility, actual: applicationData.cargoTankFacility, isCorrect: null, fieldPath: 'cargoTankFacility', category: 'operation_type' },
      { fieldName: 'driveaway', displayName: 'Will the Applicant operate as a Driveaway?', expected: expectedData.driveaway, actual: applicationData.driveaway, isCorrect: null, fieldPath: 'driveaway', category: 'operation_type' },
      { fieldName: 'towaway', displayName: 'Will the Applicant operate as a Towaway?', expected: expectedData.towaway, actual: applicationData.towaway, isCorrect: null, fieldPath: 'towaway', category: 'operation_type' },
      { fieldName: 'cargoClassifications', displayName: 'Please select all classifications of cargo that the Applicant will transport or handle', expected: expectedData.cargoClassifications, actual: applicationData.cargoClassifications, isCorrect: null, fieldPath: 'cargoClassifications', category: 'operation_type' },
      
      // Vehicle Summary Questions
      { fieldName: 'nonCMVProperty', displayName: 'Non-CMV Property', expected: expectedData.nonCMVProperty, actual: applicationData.nonCMVProperty, isCorrect: null, fieldPath: 'nonCMVProperty', category: 'vehicle_summary' },
      { fieldName: 'ownedVehicles.straightTrucks', displayName: 'Owned Straight Truck(s)', expected: expectedData.ownedVehicles?.straightTrucks, actual: applicationData.ownedVehicles?.straightTrucks, isCorrect: null, fieldPath: 'ownedVehicles.straightTrucks', category: 'vehicle_summary' },
      { fieldName: 'ownedVehicles.truckTractors', displayName: 'Owned Truck Tractor(s)', expected: expectedData.ownedVehicles?.truckTractors, actual: applicationData.ownedVehicles?.truckTractors, isCorrect: null, fieldPath: 'ownedVehicles.truckTractors', category: 'vehicle_summary' },
      { fieldName: 'ownedVehicles.trailers', displayName: 'Owned Trailer(s)', expected: expectedData.ownedVehicles?.trailers, actual: applicationData.ownedVehicles?.trailers, isCorrect: null, fieldPath: 'ownedVehicles.trailers', category: 'vehicle_summary' },
      { fieldName: 'ownedVehicles.iepTrailerChassis', displayName: 'Owned IEP Trailer Chassis Only', expected: expectedData.ownedVehicles?.iepTrailerChassis, actual: applicationData.ownedVehicles?.iepTrailerChassis, isCorrect: null, fieldPath: 'ownedVehicles.iepTrailerChassis', category: 'vehicle_summary' },
      { fieldName: 'termLeasedVehicles.straightTrucks', displayName: 'Term Leased Straight Truck(s)', expected: expectedData.termLeasedVehicles?.straightTrucks, actual: applicationData.termLeasedVehicles?.straightTrucks, isCorrect: null, fieldPath: 'termLeasedVehicles.straightTrucks', category: 'vehicle_summary' },
      { fieldName: 'termLeasedVehicles.truckTractors', displayName: 'Term Leased Truck Tractor(s)', expected: expectedData.termLeasedVehicles?.truckTractors, actual: applicationData.termLeasedVehicles?.truckTractors, isCorrect: null, fieldPath: 'termLeasedVehicles.truckTractors', category: 'vehicle_summary' },
      { fieldName: 'termLeasedVehicles.trailers', displayName: 'Term Leased Trailer(s)', expected: expectedData.termLeasedVehicles?.trailers, actual: applicationData.termLeasedVehicles?.trailers, isCorrect: null, fieldPath: 'termLeasedVehicles.trailers', category: 'vehicle_summary' },
      { fieldName: 'termLeasedVehicles.iepTrailerChassis', displayName: 'Term Leased IEP Trailer Chassis Only', expected: expectedData.termLeasedVehicles?.iepTrailerChassis, actual: applicationData.termLeasedVehicles?.iepTrailerChassis, isCorrect: null, fieldPath: 'termLeasedVehicles.iepTrailerChassis', category: 'vehicle_summary' },
      { fieldName: 'tripLeasedVehicles.straightTrucks', displayName: 'Trip Leased Straight Truck(s)', expected: expectedData.tripLeasedVehicles?.straightTrucks, actual: applicationData.tripLeasedVehicles?.straightTrucks, isCorrect: null, fieldPath: 'tripLeasedVehicles.straightTrucks', category: 'vehicle_summary' },
      { fieldName: 'tripLeasedVehicles.truckTractors', displayName: 'Trip Leased Truck Tractor(s)', expected: expectedData.tripLeasedVehicles?.truckTractors, actual: applicationData.tripLeasedVehicles?.truckTractors, isCorrect: null, fieldPath: 'tripLeasedVehicles.truckTractors', category: 'vehicle_summary' },
      { fieldName: 'tripLeasedVehicles.trailers', displayName: 'Trip Leased Trailer(s)', expected: expectedData.tripLeasedVehicles?.trailers, actual: applicationData.tripLeasedVehicles?.trailers, isCorrect: null, fieldPath: 'tripLeasedVehicles.trailers', category: 'vehicle_summary' },
      { fieldName: 'tripLeasedVehicles.iepTrailerChassis', displayName: 'Trip Leased IEP Trailer Chassis Only', expected: expectedData.tripLeasedVehicles?.iepTrailerChassis, actual: applicationData.tripLeasedVehicles?.iepTrailerChassis, isCorrect: null, fieldPath: 'tripLeasedVehicles.iepTrailerChassis', category: 'vehicle_summary' },
      { fieldName: 'towDriveawayVehicles.straightTrucks', displayName: 'Tow / Driveway Straight Truck(s)', expected: expectedData.towDriveawayVehicles?.straightTrucks, actual: applicationData.towDriveawayVehicles?.straightTrucks, isCorrect: null, fieldPath: 'towDriveawayVehicles.straightTrucks', category: 'vehicle_summary' },
      { fieldName: 'towDriveawayVehicles.truckTractors', displayName: 'Tow / Driveway Truck Tractor(s)', expected: expectedData.towDriveawayVehicles?.truckTractors, actual: applicationData.towDriveawayVehicles?.truckTractors, isCorrect: null, fieldPath: 'towDriveawayVehicles.truckTractors', category: 'vehicle_summary' },
      { fieldName: 'towDriveawayVehicles.trailers', displayName: 'Tow / Driveway Trailer(s)', expected: expectedData.towDriveawayVehicles?.trailers, actual: applicationData.towDriveawayVehicles?.trailers, isCorrect: null, fieldPath: 'towDriveawayVehicles.trailers', category: 'vehicle_summary' },
      { fieldName: 'towDriveawayVehicles.iepTrailerChassis', displayName: 'Tow / Driveway IEP Trailer Chassis Only', expected: expectedData.towDriveawayVehicles?.iepTrailerChassis, actual: applicationData.towDriveawayVehicles?.iepTrailerChassis, isCorrect: null, fieldPath: 'towDriveawayVehicles.iepTrailerChassis', category: 'vehicle_summary' },
      { fieldName: 'canadaVehicles', displayName: 'Please provide the number of vehicles that the Entity will operate in Canada', expected: expectedData.canadaVehicles, actual: applicationData.canadaVehicles, isCorrect: null, fieldPath: 'canadaVehicles', category: 'vehicle_summary' },
      { fieldName: 'mexicoVehicles', displayName: 'Please provide the number of vehicles that the Entity will operate in Mexico', expected: expectedData.mexicoVehicles, actual: applicationData.mexicoVehicles, isCorrect: null, fieldPath: 'mexicoVehicles', category: 'vehicle_summary' },
      { fieldName: 'interstateVehicles', displayName: 'Please provide the number of Commercial Motor Vehicles the Applicant will operate solely in Interstate Commerce', expected: expectedData.interstateVehicles, actual: applicationData.interstateVehicles, isCorrect: null, fieldPath: 'interstateVehicles', category: 'vehicle_summary' },
      { fieldName: 'intrastateVehicles', displayName: 'Please provide the number of Commercial Motor Vehicles the Applicant will operate solely in Intrastate Commerce', expected: expectedData.intrastateVehicles, actual: applicationData.intrastateVehicles, isCorrect: null, fieldPath: 'intrastateVehicles', category: 'vehicle_summary' },
      
      // Driver Summary Questions
      { fieldName: 'interstateDrivers100Mile', displayName: 'What are the number of drivers who will operate as Interstate - Within a 100 Air-Mile Radius', expected: expectedData.interstateDrivers100Mile, actual: applicationData.interstateDrivers100Mile, isCorrect: null, fieldPath: 'interstateDrivers100Mile', category: 'driver_summary' },
      { fieldName: 'interstateDriversBeyond100Mile', displayName: 'What are the number of drivers who will operate as Interstate - Beyond a 100 Air-Mile Radius', expected: expectedData.interstateDriversBeyond100Mile, actual: applicationData.interstateDriversBeyond100Mile, isCorrect: null, fieldPath: 'interstateDriversBeyond100Mile', category: 'driver_summary' },
      { fieldName: 'intrastateDrivers100Mile', displayName: 'What are the number of drivers who will operate solely as Intrastate - Within a 100 Air-Mile Radius', expected: expectedData.intrastateDrivers100Mile, actual: applicationData.intrastateDrivers100Mile, isCorrect: null, fieldPath: 'intrastateDrivers100Mile', category: 'driver_summary' },
      { fieldName: 'intrastateDriversBeyond100Mile', displayName: 'What are the number of drivers who will operate solely as Intrastate - Beyond a 100 Air-Mile Radius', expected: expectedData.intrastateDriversBeyond100Mile, actual: applicationData.intrastateDriversBeyond100Mile, isCorrect: null, fieldPath: 'intrastateDriversBeyond100Mile', category: 'driver_summary' },
      { fieldName: 'cdlDrivers', displayName: 'What are the number of drivers with a Commercial Driver\'s License (CDL), Licencia Federal de Conductor (LFC), or a valid Canadian License Class 1, 2, 3, or 4 (or Class A, B, C, or D if licensed in Ontario)?', expected: expectedData.cdlDrivers, actual: applicationData.cdlDrivers, isCorrect: null, fieldPath: 'cdlDrivers', category: 'driver_summary' },
      { fieldName: 'canadaDrivers', displayName: 'What are the number of drivers who will operate in Canada', expected: expectedData.canadaDrivers, actual: applicationData.canadaDrivers, isCorrect: null, fieldPath: 'canadaDrivers', category: 'driver_summary' },
      { fieldName: 'mexicoDrivers', displayName: 'What are the number of drivers who will operate in Mexico', expected: expectedData.mexicoDrivers, actual: applicationData.mexicoDrivers, isCorrect: null, fieldPath: 'mexicoDrivers', category: 'driver_summary' },
      
      // Affiliation Questions
      { fieldName: 'hasAffiliations', displayName: 'Does the Applicant currently have, or has had within the last 3 years of the date of filing this application, relationships involving common stock, common ownership, common management, common control or familial relationships or any other person or applicant for registration?', expected: expectedData.hasAffiliations, actual: applicationData.hasAffiliations, isCorrect: null, fieldPath: 'hasAffiliations', category: 'affiliation' },
      
      // Compliance Certifications Questions
      { fieldName: 'complianceCertifications.willingAble', displayName: 'Does the Applicant certify it is willing and able to provide the proposed operations or service and to comply with all pertinent statutory and regulatory requirements and regulations issued or administered by the U.S. Department of Transportation?', expected: expectedData.complianceCertifications?.willingAble, actual: applicationData.complianceCertifications?.willingAble, isCorrect: null, fieldPath: 'complianceCertifications.willingAble', category: 'compliance_certifications' },
      { fieldName: 'complianceCertifications.produceDocuments', displayName: 'Does the Applicant certify it is willing and able to produce for review or inspection documents which are requested for the purpose of determining compliance with applicable statutes and regulations administered by the Department of Transportation?', expected: expectedData.complianceCertifications?.produceDocuments, actual: applicationData.complianceCertifications?.produceDocuments, isCorrect: null, fieldPath: 'complianceCertifications.produceDocuments', category: 'compliance_certifications' },
      { fieldName: 'complianceCertifications.notDisqualified', displayName: 'Does the Applicant certify it is not currently disqualified from operating commercial motor vehicles in the United States?', expected: expectedData.complianceCertifications?.notDisqualified, actual: applicationData.complianceCertifications?.notDisqualified, isCorrect: null, fieldPath: 'complianceCertifications.notDisqualified', category: 'compliance_certifications' },
      { fieldName: 'complianceCertifications.processAgent', displayName: 'Does the Applicant certify it understands that the agent(s) for service of process designation will be deemed the applicant\'s official representative(s) in the United States for receipt of filings and notices in administrative proceedings under 49 U.S.C. § 13303?', expected: expectedData.complianceCertifications?.processAgent, actual: applicationData.complianceCertifications?.processAgent, isCorrect: null, fieldPath: 'complianceCertifications.processAgent', category: 'compliance_certifications' },
      { fieldName: 'complianceCertifications.notSuspended', displayName: 'Does the Applicant certify that the carrier is not prohibited from filing this application because its FMCSA registration is currently under suspension, or was revoked less than 30 days before filing the application?', expected: expectedData.complianceCertifications?.notSuspended, actual: applicationData.complianceCertifications?.notSuspended, isCorrect: null, fieldPath: 'complianceCertifications.notSuspended', category: 'compliance_certifications' },
      { fieldName: 'complianceCertifications.deficienciesCorrected', displayName: 'If the Applicant\'s registration is currently revoked, does the Applicant certify the deficiencies cited in the revocation proceeding have been corrected?', expected: expectedData.complianceCertifications?.deficienciesCorrected, actual: applicationData.complianceCertifications?.deficienciesCorrected, isCorrect: null, fieldPath: 'complianceCertifications.deficienciesCorrected', category: 'compliance_certifications' },
      
      // Electronic Signature
      { fieldName: 'electronicSignature', displayName: 'Electronic Signature (Applicant\'s First Name and Last Name)', expected: expectedData.electronicSignature, actual: applicationData.electronicSignature, isCorrect: null, fieldPath: 'electronicSignature', category: 'electronic_signature' },
    ];
    
    setFieldComparisons(comparisons);
  };

  // Start training session
  const startTrainingSession = async () => {
    const scenario = await loadNextScenario();
    if (!scenario) {
      alert('No scenarios available. Please generate scenarios first.');
      return;
    }

    const session: TrainingSession = {
      id: `session_${Date.now()}`,
      agentId: agentId,
      startTime: new Date(),
      currentStep: 1,
      totalSteps: 9,
      score: 0,
      mistakes: [],
      completed: false,
      applicationData: {},
      scenario: scenario
    };

    setTrainingSession(session);
    setIsTraining(true);
    setCurrentStep(1);
    setApplicationData({});
    setShowResults(false);
    setShowReview(false);
  };

  // Submit correction and load next scenario
  const submitCorrection = async (overallCorrect: boolean) => {
    if (!trainingSession || !currentScenario) return;

    // Calculate accuracy from individual field reviews
    const correctFields = fieldComparisons.filter(f => f.isCorrect === true).length;
    const totalFields = fieldComparisons.length;
    const accuracy = (correctFields / totalFields) * 100;

    // Collect incorrect fields with details
    const incorrectFields = fieldComparisons
      .filter(f => f.isCorrect === false)
      .map(f => ({
        fieldName: f.fieldName,
        displayName: f.displayName,
        expected: f.expected,
        actual: f.actual,
        category: f.category
      }));

    try {
      await fetch('/api/usdot-rpa-training/submit-result', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          sessionId: trainingSession.id,
          scenarioId: currentScenario.id,
          applicationData: applicationData,
          fieldComparisons: fieldComparisons,
          incorrectFields: incorrectFields,
          accuracy: accuracy,
          reviewFeedback: reviewFeedback,
          isCorrect: overallCorrect,
          reviewedFields: totalFields,
          correctFields: correctFields
        })
      });
    } catch (error) {
      console.error('Error submitting result:', error);
    }

    // Load next scenario
    setReviewFeedback('');
    setShowReview(false);
    setIsTraining(false);
    setCurrentScenario(null);
    setApplicationData({});
    setFieldComparisons([]);
    await loadSessionStats();
  };

  // Application steps configuration
  const applicationSteps = [
    { id: 1, title: '3rd Party Service Provider' },
    { id: 2, title: 'Business Information' },
    { id: 3, title: 'Company Contact' },
    { id: 4, title: 'Operations Classification' },
    { id: 5, title: 'Vehicle Summary' },
    { id: 6, title: 'Driver Summary' },
    { id: 7, title: 'Affiliations' },
    { id: 8, title: 'Compliance Certifications' },
    { id: 9, title: 'Electronic Signature' }
  ];

  // Render FMCSA Header (pixel-perfect government styling)
  const renderFMCSAHeader = () => (
    <div className="bg-blue-900 text-white" style={{ backgroundColor: '#003366' }}>
      <div className="max-w-6xl mx-auto px-4 py-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="text-2xl font-bold">FMCSA</div>
            <div className="text-sm">
              <div className="font-semibold">Federal Motor Carrier Safety Administration</div>
              <div className="text-xs opacity-90">U.S. Department of Transportation</div>
            </div>
          </div>
          <div className="text-right text-xs">
            <div>Unified Registration System</div>
            <div className="opacity-90">https://safer.fmcsa.dot.gov</div>
          </div>
        </div>
      </div>
    </div>
  );

  // Render FMCSA Navigation Menu
  const renderFMCSANav = () => (
    <div className="bg-gray-100 border-b-2 border-gray-300">
      <div className="max-w-6xl mx-auto px-4">
        <div className="flex space-x-1 text-sm">
          <button className="px-4 py-2 bg-white border-r border-gray-300 hover:bg-gray-50 font-medium">
            HOME
          </button>
          <button className="px-4 py-2 hover:bg-gray-200 font-medium">
            MY ACCOUNT
          </button>
          <button className="px-4 py-2 hover:bg-gray-200 font-medium">
            APPLICATIONS
          </button>
          <button className="px-4 py-2 hover:bg-gray-200 font-medium">
            HELP
          </button>
          <button className="px-4 py-2 hover:bg-gray-200 font-medium text-red-600">
            LOGOUT
          </button>
        </div>
      </div>
    </div>
  );

  // Render current form step
  const renderCurrentStep = () => {
    return (
      <div className="bg-white">
        {/* FMCSA Header */}
        {renderFMCSAHeader()}
        {renderFMCSANav()}

        {/* Progress Indicator */}
        <div className="max-w-6xl mx-auto px-4 py-4 bg-gray-50 border-b border-gray-300">
          <div className="flex items-center justify-between mb-2">
            <h2 className="text-lg font-bold text-gray-900">
              USDOT Number Application
            </h2>
            <span className="text-sm text-gray-600">
              Step {currentStep} of 9
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-3">
            <div 
              className="bg-blue-600 h-3 rounded-full transition-all duration-300" 
              style={{ width: `${(currentStep / 9) * 100}%` }}
            ></div>
          </div>
        </div>

        {/* Form Content */}
        <div className="max-w-6xl mx-auto px-4 py-6">
          <div className="bg-white border-2 border-gray-300 shadow-sm p-6">
            {renderStepContent()}
          </div>

          {/* Navigation Buttons */}
          <div className="mt-6 flex justify-between items-center">
            <button 
              className="px-6 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed font-medium" 
              disabled={currentStep === 1 || isAutoFilling}
              onClick={() => setCurrentStep(currentStep - 1)}
            >
              ← PREVIOUS
            </button>
            <button 
              className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50 font-medium"
              disabled={isAutoFilling}
              onClick={() => {
                if (currentStep < 9) {
                  setCurrentStep(currentStep + 1);
                } else {
                  setShowReview(true);
                  compareResults(mapScenarioToFormData(currentScenario!));
                }
              }}
            >
              {currentStep === 9 ? 'SUBMIT' : 'NEXT →'}
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Render content for each step
  const renderStepContent = () => {
    const fieldClass = (fieldName: string) => 
      `w-full px-3 py-2 border-2 border-gray-300 rounded focus:outline-none focus:border-blue-500 ${
        highlightedField === fieldName ? 'border-yellow-400 bg-yellow-50' : ''
      }`;

    switch (currentStep) {
      case 1:
        return (
          <div>
            <h3 className="text-xl font-bold text-gray-900 mb-4">
              Are you a 3rd Party Service Provider?
            </h3>
            <p className="text-sm text-gray-600 mb-4">
              A 3rd party service provider is a business or individual that assists others in completing USDOT registrations.
            </p>
            <div className="space-y-3">
              <label className="flex items-center space-x-3 cursor-pointer p-3 border-2 border-gray-300 rounded hover:bg-gray-50">
                <input
                  type="radio"
                  name="thirdParty"
                  value="Yes"
                  checked={applicationData.isThirdPartyProvider === 'Yes'}
                  onChange={(e) => setApplicationData(prev => ({ ...prev, isThirdPartyProvider: e.target.value }))}
                  className="w-5 h-5 text-blue-600"
                />
                <span className="text-gray-900 font-medium">Yes</span>
              </label>
              
              <label className="flex items-center space-x-3 cursor-pointer p-3 border-2 border-gray-300 rounded hover:bg-gray-50">
                <input
                  type="radio"
                  name="thirdParty"
                  value="No"
                  checked={applicationData.isThirdPartyProvider === 'No'}
                  onChange={(e) => setApplicationData(prev => ({ ...prev, isThirdPartyProvider: e.target.value }))}
                  className="w-5 h-5 text-blue-600"
                />
                <span className="text-gray-900 font-medium">No</span>
              </label>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-4">
            <h3 className="text-xl font-bold text-gray-900 mb-4">Business Information</h3>
            
            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Legal Business Name <span className="text-red-600">*</span>
              </label>
              <input
                type="text"
                value={applicationData.legalBusinessName || ''}
                onChange={(e) => setApplicationData(prev => ({ ...prev, legalBusinessName: e.target.value }))}
                className={fieldClass('legalBusinessName')}
                placeholder="Enter legal business name"
              />
            </div>
            
            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Doing Business As (DBA) Name
              </label>
              <input
                type="text"
                value={applicationData.dbaName || ''}
                onChange={(e) => setApplicationData(prev => ({ ...prev, dbaName: e.target.value }))}
                className={fieldClass('dbaName')}
                placeholder="Enter DBA name if different"
              />
            </div>

            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Form of Business <span className="text-red-600">*</span>
              </label>
              <select
                value={applicationData.formOfBusiness || ''}
                onChange={(e) => setApplicationData(prev => ({ ...prev, formOfBusiness: e.target.value }))}
                className={fieldClass('formOfBusiness')}
              >
                <option value="">Select...</option>
                <option value="sole_proprietor">Sole Proprietor</option>
                <option value="partnership">Partnership</option>
                <option value="limited_liability_company">Limited Liability Company (LLC)</option>
                <option value="corporation">Corporation</option>
                <option value="limited_liability_partnership">Limited Liability Partnership (LLP)</option>
                <option value="trusts">Trust</option>
                <option value="other">Other</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Employer Identification Number (EIN) <span className="text-red-600">*</span>
              </label>
              <input
                type="text"
                value={applicationData.ein || ''}
                onChange={(e) => setApplicationData(prev => ({ ...prev, ein: e.target.value }))}
                className={fieldClass('ein')}
                placeholder="XX-XXXXXXX"
              />
            </div>

            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Business Phone <span className="text-red-600">*</span>
              </label>
              <input
                type="tel"
                value={applicationData.phone || ''}
                onChange={(e) => setApplicationData(prev => ({ ...prev, phone: e.target.value }))}
                className={fieldClass('phone')}
                placeholder="(XXX) XXX-XXXX"
              />
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-4">
            <h3 className="text-xl font-bold text-gray-900 mb-4">Company Contact Information</h3>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-bold text-gray-700 mb-1">
                  First Name <span className="text-red-600">*</span>
                </label>
                <input
                  type="text"
                  value={applicationData.contactFirstName || ''}
                  onChange={(e) => setApplicationData(prev => ({ ...prev, contactFirstName: e.target.value }))}
                  className={fieldClass('contactFirstName')}
                />
              </div>
              
              <div>
                <label className="block text-sm font-bold text-gray-700 mb-1">
                  Last Name <span className="text-red-600">*</span>
                </label>
                <input
                  type="text"
                  value={applicationData.contactLastName || ''}
                  onChange={(e) => setApplicationData(prev => ({ ...prev, contactLastName: e.target.value }))}
                  className={fieldClass('contactLastName')}
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Email Address <span className="text-red-600">*</span>
              </label>
              <input
                type="email"
                value={applicationData.contactEmail || ''}
                onChange={(e) => setApplicationData(prev => ({ ...prev, contactEmail: e.target.value }))}
                className={fieldClass('contactEmail')}
              />
            </div>

            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Phone Number <span className="text-red-600">*</span>
              </label>
              <input
                type="tel"
                value={applicationData.contactPhone || ''}
                onChange={(e) => setApplicationData(prev => ({ ...prev, contactPhone: e.target.value }))}
                className={fieldClass('contactPhone')}
              />
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-4">
            <h3 className="text-xl font-bold text-gray-900 mb-4">Operations Classification</h3>
            
            <div>
              <label className="block text-sm font-bold text-gray-700 mb-2">
                Do you transport property? <span className="text-red-600">*</span>
              </label>
              <div className="space-y-2">
                <label className="flex items-center space-x-3">
                  <input
                    type="radio"
                    name="transportProperty"
                    value="Yes"
                    checked={applicationData.transportProperty === 'Yes'}
                    onChange={(e) => setApplicationData(prev => ({ ...prev, transportProperty: e.target.value }))}
                    className="w-4 h-4"
                  />
                  <span>Yes</span>
                </label>
                <label className="flex items-center space-x-3">
                  <input
                    type="radio"
                    name="transportProperty"
                    value="No"
                    checked={applicationData.transportProperty === 'No'}
                    onChange={(e) => setApplicationData(prev => ({ ...prev, transportProperty: e.target.value }))}
                    className="w-4 h-4"
                  />
                  <span>No</span>
                </label>
              </div>
            </div>

            <div>
              <label className="block text-sm font-bold text-gray-700 mb-2">
                Do you receive compensation for transporting property? <span className="text-red-600">*</span>
              </label>
              <div className="space-y-2">
                <label className="flex items-center space-x-3">
                  <input
                    type="radio"
                    name="receiveCompensation"
                    value="Yes"
                    checked={applicationData.receiveCompensation === 'Yes'}
                    onChange={(e) => setApplicationData(prev => ({ ...prev, receiveCompensation: e.target.value }))}
                    className="w-4 h-4"
                  />
                  <span>Yes (For-Hire)</span>
                </label>
                <label className="flex items-center space-x-3">
                  <input
                    type="radio"
                    name="receiveCompensation"
                    value="No"
                    checked={applicationData.receiveCompensation === 'No'}
                    onChange={(e) => setApplicationData(prev => ({ ...prev, receiveCompensation: e.target.value }))}
                    className="w-4 h-4"
                  />
                  <span>No (Private)</span>
                </label>
              </div>
            </div>

            <div>
              <label className="block text-sm font-bold text-gray-700 mb-2">
                Do you operate in interstate commerce? <span className="text-red-600">*</span>
              </label>
              <p className="text-xs text-gray-600 mb-2">
                Interstate: Crosses state lines. Intrastate: Within one state only.
              </p>
              <div className="space-y-2">
                <label className="flex items-center space-x-3">
                  <input
                    type="radio"
                    name="interstateCommerce"
                    value="Yes"
                    checked={applicationData.interstateCommerce === 'Yes'}
                    onChange={(e) => setApplicationData(prev => ({ ...prev, interstateCommerce: e.target.value }))}
                    className="w-4 h-4"
                  />
                  <span>Yes (Interstate)</span>
                </label>
                <label className="flex items-center space-x-3">
                  <input
                    type="radio"
                    name="interstateCommerce"
                    value="No"
                    checked={applicationData.interstateCommerce === 'No'}
                    onChange={(e) => setApplicationData(prev => ({ ...prev, interstateCommerce: e.target.value }))}
                    className="w-4 h-4"
                  />
                  <span>No (Intrastate only)</span>
                </label>
              </div>
            </div>
          </div>
        );

      case 5:
        return (
          <div className="space-y-4">
            <h3 className="text-xl font-bold text-gray-900 mb-4">Vehicle Summary</h3>
            
            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Number of Owned Straight Trucks
              </label>
              <input
                type="number"
                value={applicationData.ownedVehicles?.straightTrucks || ''}
                onChange={(e) => setApplicationData(prev => ({ 
                  ...prev, 
                  ownedVehicles: { ...prev.ownedVehicles, straightTrucks: e.target.value } as any
                }))}
                className={fieldClass('ownedVehicles.straightTrucks')}
                min="0"
              />
            </div>

            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Number of Owned Truck Tractors
              </label>
              <input
                type="number"
                value={applicationData.ownedVehicles?.truckTractors || ''}
                onChange={(e) => setApplicationData(prev => ({ 
                  ...prev, 
                  ownedVehicles: { ...prev.ownedVehicles, truckTractors: e.target.value } as any
                }))}
                className={fieldClass('ownedVehicles.truckTractors')}
                min="0"
              />
            </div>

            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Number of CMVs Operating in Interstate Commerce <span className="text-red-600">*</span>
              </label>
              <input
                type="number"
                value={applicationData.interstateVehicles || ''}
                onChange={(e) => setApplicationData(prev => ({ ...prev, interstateVehicles: e.target.value }))}
                className={fieldClass('interstateVehicles')}
                min="0"
              />
            </div>

            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Number of CMVs Operating in Intrastate Commerce Only
              </label>
              <input
                type="number"
                value={applicationData.intrastateVehicles || ''}
                onChange={(e) => setApplicationData(prev => ({ ...prev, intrastateVehicles: e.target.value }))}
                className={fieldClass('intrastateVehicles')}
                min="0"
              />
            </div>
          </div>
        );

      case 6:
        return (
          <div className="space-y-4">
            <h3 className="text-xl font-bold text-gray-900 mb-4">Driver Summary</h3>
            
            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Interstate Drivers (Beyond 100-mile radius) <span className="text-red-600">*</span>
              </label>
              <input
                type="number"
                value={applicationData.interstateDriversBeyond100Mile || ''}
                onChange={(e) => setApplicationData(prev => ({ ...prev, interstateDriversBeyond100Mile: e.target.value }))}
                className={fieldClass('interstateDriversBeyond100Mile')}
                min="0"
              />
            </div>

            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Interstate Drivers (Within 100-mile radius)
              </label>
              <input
                type="number"
                value={applicationData.interstateDrivers100Mile || ''}
                onChange={(e) => setApplicationData(prev => ({ ...prev, interstateDrivers100Mile: e.target.value }))}
                className={fieldClass('interstateDrivers100Mile')}
                min="0"
              />
            </div>

            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Number of Drivers with CDL <span className="text-red-600">*</span>
              </label>
              <input
                type="number"
                value={applicationData.cdlDrivers || ''}
                onChange={(e) => setApplicationData(prev => ({ ...prev, cdlDrivers: e.target.value }))}
                className={fieldClass('cdlDrivers')}
                min="0"
              />
            </div>
          </div>
        );

      case 7:
        return (
          <div className="space-y-4">
            <h3 className="text-xl font-bold text-gray-900 mb-4">Business Affiliations</h3>
            
            <div>
              <label className="block text-sm font-bold text-gray-700 mb-2">
                Do you have any business affiliations? <span className="text-red-600">*</span>
              </label>
              <p className="text-xs text-gray-600 mb-2">
                Affiliations include parent companies, subsidiaries, or other related business entities.
              </p>
              <div className="space-y-2">
                <label className="flex items-center space-x-3">
                  <input
                    type="radio"
                    name="hasAffiliations"
                    value="Yes"
                    checked={applicationData.hasAffiliations === 'Yes'}
                    onChange={(e) => setApplicationData(prev => ({ ...prev, hasAffiliations: e.target.value }))}
                    className="w-4 h-4"
                  />
                  <span>Yes</span>
                </label>
                <label className="flex items-center space-x-3">
                  <input
                    type="radio"
                    name="hasAffiliations"
                    value="No"
                    checked={applicationData.hasAffiliations === 'No'}
                    onChange={(e) => setApplicationData(prev => ({ ...prev, hasAffiliations: e.target.value }))}
                    className="w-4 h-4"
                  />
                  <span>No</span>
                </label>
              </div>
            </div>
          </div>
        );

      case 8:
        return (
          <div className="space-y-4">
            <h3 className="text-xl font-bold text-gray-900 mb-4">Compliance Certifications</h3>
            <p className="text-sm text-gray-600 mb-4">
              Please certify the following statements by checking each box:
            </p>
            
            <div className="space-y-3 border-2 border-gray-300 p-4 rounded">
              <label className="flex items-start space-x-3">
                <input
                  type="checkbox"
                  checked={applicationData.complianceCertifications?.willingAble === 'Yes'}
                  onChange={(e) => setApplicationData(prev => ({
                    ...prev,
                    complianceCertifications: {
                      ...prev.complianceCertifications,
                      willingAble: e.target.checked ? 'Yes' : 'No'
                    } as any
                  }))}
                  className="w-5 h-5 mt-1"
                />
                <span className="text-sm">
                  I certify that I am willing and able to comply with all applicable federal regulations.
                </span>
              </label>

              <label className="flex items-start space-x-3">
                <input
                  type="checkbox"
                  checked={applicationData.complianceCertifications?.produceDocuments === 'Yes'}
                  onChange={(e) => setApplicationData(prev => ({
                    ...prev,
                    complianceCertifications: {
                      ...prev.complianceCertifications,
                      produceDocuments: e.target.checked ? 'Yes' : 'No'
                    } as any
                  }))}
                  className="w-5 h-5 mt-1"
                />
                <span className="text-sm">
                  I certify that I will produce documents upon request by FMCSA.
                </span>
              </label>

              <label className="flex items-start space-x-3">
                <input
                  type="checkbox"
                  checked={applicationData.complianceCertifications?.notDisqualified === 'Yes'}
                  onChange={(e) => setApplicationData(prev => ({
                    ...prev,
                    complianceCertifications: {
                      ...prev.complianceCertifications,
                      notDisqualified: e.target.checked ? 'Yes' : 'No'
                    } as any
                  }))}
                  className="w-5 h-5 mt-1"
                />
                <span className="text-sm">
                  I certify that I am not currently disqualified from operating a commercial motor vehicle.
                </span>
              </label>
            </div>
          </div>
        );

      case 9:
        return (
          <div className="space-y-4">
            <h3 className="text-xl font-bold text-gray-900 mb-4">Electronic Signature</h3>
            
            <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <ExclamationIcon className="h-5 w-5 text-yellow-400" />
                </div>
                <div className="ml-3">
                  <p className="text-sm text-yellow-700">
                    By providing your electronic signature below, you certify that all information provided in this application is true and accurate.
                  </p>
                </div>
              </div>
            </div>

            <div>
              <label className="block text-sm font-bold text-gray-700 mb-1">
                Type Your Full Legal Name <span className="text-red-600">*</span>
              </label>
              <input
                type="text"
                value={applicationData.electronicSignature || ''}
                onChange={(e) => setApplicationData(prev => ({ ...prev, electronicSignature: e.target.value }))}
                className={fieldClass('electronicSignature')}
                placeholder="Type your full legal name"
              />
              <p className="text-xs text-gray-500 mt-1">
                This constitutes your electronic signature. Date: {new Date().toLocaleDateString()}
              </p>
            </div>
          </div>
        );

      default:
        return <div>Step not implemented</div>;
    }
  };

  // Render scenario details panel
  const renderScenarioPanel = () => {
    if (!currentScenario) return null;

    return (
      <div className="bg-white border-2 border-gray-300 shadow p-6 h-full overflow-y-auto">
        <h3 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
          <DocumentTextIcon className="h-5 w-5 mr-2 text-blue-600" />
          Scenario Details
        </h3>

        <div className="space-y-4 text-sm">
          <div>
            <label className="font-bold text-gray-700">Scenario ID:</label>
            <p className="text-gray-900">{currentScenario.id}</p>
          </div>

          <div>
            <label className="font-bold text-gray-700">Company Name:</label>
            <p className="text-gray-900">{currentScenario.legalBusinessName}</p>
          </div>

          <div>
            <label className="font-bold text-gray-700">State:</label>
            <p className="text-gray-900">{currentScenario.principalAddress.state}</p>
          </div>

          <div>
            <label className="font-bold text-gray-700">Business Type:</label>
            <p className="text-gray-900 capitalize">{currentScenario.formOfBusiness.replace(/_/g, ' ')}</p>
          </div>

          <div>
            <label className="font-bold text-gray-700">Operation:</label>
            <p className="text-gray-900">
              {currentScenario.receiveCompensationForTransport === 'Yes' ? 'For-Hire' : 'Private'} / 
              {currentScenario.transportNonHazardousInterstate === 'Yes' ? ' Interstate' : ' Intrastate'}
            </p>
          </div>

          <div>
            <label className="font-bold text-gray-700">Fleet Size:</label>
            <p className="text-gray-900">
              {currentScenario.vehicles.straightTrucks.owned + currentScenario.vehicles.truckTractors.owned} vehicles
            </p>
          </div>

          <div className="border-t pt-4">
            <label className="font-bold text-gray-700 mb-2 block">Expected Requirements:</label>
            <div className="space-y-2">
              <div className="flex items-center">
                {currentScenario.expectedRequirements.usdotRequired ? (
                  <CheckCircleIcon className="h-4 w-4 text-green-500 mr-2" />
                ) : (
                  <XCircleIcon className="h-4 w-4 text-gray-400 mr-2" />
                )}
                <span className={currentScenario.expectedRequirements.usdotRequired ? 'text-green-700' : 'text-gray-500'}>
                  USDOT Number
                </span>
              </div>
              <div className="flex items-center">
                {currentScenario.expectedRequirements.mcAuthorityRequired ? (
                  <CheckCircleIcon className="h-4 w-4 text-green-500 mr-2" />
                ) : (
                  <XCircleIcon className="h-4 w-4 text-gray-400 mr-2" />
                )}
                <span className={currentScenario.expectedRequirements.mcAuthorityRequired ? 'text-green-700' : 'text-gray-500'}>
                  MC Authority
                </span>
              </div>
              <div className="flex items-center">
                {currentScenario.expectedRequirements.iftaRequired ? (
                  <CheckCircleIcon className="h-4 w-4 text-green-500 mr-2" />
                ) : (
                  <XCircleIcon className="h-4 w-4 text-gray-400 mr-2" />
                )}
                <span className={currentScenario.expectedRequirements.iftaRequired ? 'text-green-700' : 'text-gray-500'}>
                  IFTA Registration
                </span>
              </div>
              <div className="flex items-center">
                {currentScenario.expectedRequirements.hazmatEndorsementRequired ? (
                  <CheckCircleIcon className="h-4 w-4 text-green-500 mr-2" />
                ) : (
                  <XCircleIcon className="h-4 w-4 text-gray-400 mr-2" />
                )}
                <span className={currentScenario.expectedRequirements.hazmatEndorsementRequired ? 'text-green-700' : 'text-gray-500'}>
                  Hazmat Endorsement
                </span>
              </div>
            </div>
          </div>

          <div className="border-t pt-4">
            <label className="font-bold text-gray-700 mb-2 block">Reasoning:</label>
            <p className="text-gray-700 text-xs">{currentScenario.expectedRequirements.reasoning}</p>
          </div>
        </div>
      </div>
    );
  };

  // Toggle field correctness
  const toggleFieldCorrectness = (index: number, isCorrect: boolean) => {
    setFieldComparisons(prev => prev.map((comp, idx) => 
      idx === index ? { ...comp, isCorrect } : comp
    ));
  };

  // Render review/correction interface - IMPROVED SPLIT SCREEN DESIGN
  const renderReviewInterface = () => {
    if (!currentScenario) return null;

    const reviewedCount = fieldComparisons.filter(f => f.isCorrect !== null).length;
    const correctCount = fieldComparisons.filter(f => f.isCorrect === true).length;
    const totalFields = fieldComparisons.length;
    const allReviewed = reviewedCount === totalFields;
    const accuracy = allReviewed ? ((correctCount / totalFields) * 100).toFixed(1) : 'N/A';

    // Group fields by category
    const groupedFields = fieldComparisons.reduce((acc, field) => {
      if (!acc[field.category]) acc[field.category] = [];
      acc[field.category].push(field);
      return acc;
    }, {} as Record<string, FieldComparison[]>);

    return (
      <div className="fixed inset-0 bg-gray-100 z-50 overflow-hidden">
        <div className="h-full flex flex-col">
          {/* Header */}
          <div className="bg-white border-b-2 border-gray-300 px-6 py-4">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-2xl font-bold text-gray-900">
                  USDOT RPA Application Review
                </h2>
                <p className="text-sm text-gray-600">
                  Review each USDOT question: Mark correct ✓ or incorrect ✗
                </p>
              </div>
              <div className="text-right">
                <div className="text-sm text-gray-600">Progress</div>
                <div className="text-2xl font-bold text-gray-900">
                  {reviewedCount}/{totalFields} reviewed
                </div>
              </div>
            </div>
          </div>

          {/* Split Screen Content */}
          <div className="flex-1 flex overflow-hidden">
            {/* LEFT PANEL: Complete Scenario Company Information */}
            <div className="w-1/3 bg-white border-r-2 border-gray-300 overflow-y-auto p-6">
              <h3 className="text-lg font-bold text-gray-900 mb-4 flex items-center sticky top-0 bg-white pb-2">
                <DocumentTextIcon className="h-5 w-5 mr-2 text-blue-600" />
                Scenario Company Information
              </h3>

              <div className="space-y-4 text-sm">
                <div className="bg-blue-50 p-3 rounded border border-blue-200">
                  <div className="font-bold text-blue-900 mb-1">Scenario ID</div>
                  <div className="text-blue-800 font-mono text-xs">{currentScenario.id}</div>
                </div>

                <div className="border-b pb-3">
                  <div className="font-bold text-gray-700 mb-2">Operation Classification</div>
                  <div className="space-y-1 text-xs">
                    <div><span className="font-semibold">D&B Number:</span> {currentScenario.hasDunsBradstreet}</div>
                    <div><span className="font-semibold">Legal Name:</span> {currentScenario.legalBusinessName}</div>
                    <div><span className="font-semibold">DBA:</span> {currentScenario.doingBusinessAs}</div>
                    <div><span className="font-semibold">Address Same:</span> {currentScenario.principalAddressSameAsContact}</div>
                    <div><span className="font-semibold">Principal Address:</span> {currentScenario.principalAddress.street}, {currentScenario.principalAddress.city}, {currentScenario.principalAddress.state} {currentScenario.principalAddress.postalCode}</div>
                    <div><span className="font-semibold">Mailing Address:</span> {currentScenario.mailingAddress.street}, {currentScenario.mailingAddress.city}, {currentScenario.mailingAddress.state} {currentScenario.mailingAddress.postalCode}</div>
                    <div><span className="font-semibold">Phone:</span> {currentScenario.businessPhone}</div>
                    <div><span className="font-semibold">EIN:</span> {currentScenario.ein}</div>
                    <div><span className="font-semibold">Government Unit:</span> {currentScenario.isUnitOfGovernment}</div>
                    <div><span className="font-semibold">Business Form:</span> {currentScenario.formOfBusiness.replace(/_/g, ' ')}</div>
                    <div><span className="font-semibold">Ownership:</span> {currentScenario.ownershipControl.replace(/_/g, ' ')}</div>
                  </div>
                </div>

                <div className="border-b pb-3">
                  <div className="font-bold text-gray-700 mb-2">Company Contact</div>
                  <div className="space-y-1 text-xs">
                    <div><span className="font-semibold">Name:</span> {currentScenario.companyContact.firstName} {currentScenario.companyContact.middleName} {currentScenario.companyContact.lastName} {currentScenario.companyContact.suffix}</div>
                    <div><span className="font-semibold">Title:</span> {currentScenario.companyContact.title}</div>
                    <div><span className="font-semibold">Email:</span> {currentScenario.companyContact.email}</div>
                    <div><span className="font-semibold">Phone:</span> {currentScenario.companyContact.phone}</div>
                    <div><span className="font-semibold">Address:</span> {currentScenario.companyContact.address.street}, {currentScenario.companyContact.address.city}, {currentScenario.companyContact.address.state} {currentScenario.companyContact.address.postalCode}</div>
                  </div>
                </div>

                <div className="border-b pb-3">
                  <div className="font-bold text-gray-700 mb-2">Operation Type</div>
                  <div className="space-y-1 text-xs">
                    <div><span className="font-semibold">Intermodal Provider:</span> {currentScenario.operateAsIntermodalEquipmentProvider}</div>
                    <div><span className="font-semibold">Transport Property:</span> {currentScenario.transportProperty}</div>
                    <div><span className="font-semibold">Compensation:</span> {currentScenario.receiveCompensationForTransport}</div>
                    <div><span className="font-semibold">Property Type:</span> {currentScenario.propertyType.replace(/_/g, ' ')}</div>
                    <div><span className="font-semibold">Interstate Commerce:</span> {currentScenario.transportNonHazardousInterstate}</div>
                    <div><span className="font-semibold">Transport Own:</span> {currentScenario.transportOwnProperty}</div>
                    <div><span className="font-semibold">Transport Passengers:</span> {currentScenario.transportPassengers}</div>
                    <div><span className="font-semibold">Broker Services:</span> {currentScenario.provideBrokerServices}</div>
                    <div><span className="font-semibold">Freight Forwarder:</span> {currentScenario.provideFreightForwarderServices}</div>
                    <div><span className="font-semibold">Cargo Tank:</span> {currentScenario.operateCargoTankFacility}</div>
                    <div><span className="font-semibold">Driveaway:</span> {currentScenario.operateAsDriveaway}</div>
                    <div><span className="font-semibold">Towaway:</span> {currentScenario.operateAsTowaway}</div>
                    <div><span className="font-semibold">Cargo Classifications:</span> {currentScenario.cargoClassifications.join(', ')}</div>
                  </div>
                </div>

                <div className="border-b pb-3">
                  <div className="font-bold text-gray-700 mb-2">Vehicle Summary</div>
                  <div className="space-y-1 text-xs">
                    <div><span className="font-semibold">Non-CMV Property:</span> {currentScenario.nonCMVProperty}</div>
                    <div><span className="font-semibold">Straight Trucks (Owned):</span> {currentScenario.vehicles.straightTrucks.owned}</div>
                    <div><span className="font-semibold">Truck Tractors (Owned):</span> {currentScenario.vehicles.truckTractors.owned}</div>
                    <div><span className="font-semibold">Trailers (Owned):</span> {currentScenario.vehicles.trailers.owned}</div>
                    <div><span className="font-semibold">IEP Chassis (Owned):</span> {currentScenario.vehicles.iepTrailerChassis.owned}</div>
                    <div><span className="font-semibold">Canada Vehicles:</span> {currentScenario.vehiclesInCanada}</div>
                    <div><span className="font-semibold">Mexico Vehicles:</span> {currentScenario.vehiclesInMexico}</div>
                    <div><span className="font-semibold">Interstate CMVs:</span> {currentScenario.cmvInterstateOnly}</div>
                    <div><span className="font-semibold">Intrastate CMVs:</span> {currentScenario.cmvIntrastateOnly}</div>
                  </div>
                </div>

                <div className="border-b pb-3">
                  <div className="font-bold text-gray-700 mb-2">Driver Summary</div>
                  <div className="space-y-1 text-xs">
                    <div><span className="font-semibold">Interstate (100mi):</span> {currentScenario.driversInterstate.within100Miles}</div>
                    <div><span className="font-semibold">Interstate (Beyond 100mi):</span> {currentScenario.driversInterstate.beyond100Miles}</div>
                    <div><span className="font-semibold">Intrastate (100mi):</span> {currentScenario.driversIntrastate.within100Miles}</div>
                    <div><span className="font-semibold">Intrastate (Beyond 100mi):</span> {currentScenario.driversIntrastate.beyond100Miles}</div>
                    <div><span className="font-semibold">Drivers with CDL:</span> {currentScenario.driversWithCDL}</div>
                    <div><span className="font-semibold">Canada Drivers:</span> {currentScenario.driversInCanada}</div>
                    <div><span className="font-semibold">Mexico Drivers:</span> {currentScenario.driversInMexico}</div>
                  </div>
                </div>

                <div className="border-b pb-3">
                  <div className="font-bold text-gray-700 mb-2">Affiliation</div>
                  <div className="space-y-1 text-xs">
                    <div><span className="font-semibold">Has Affiliations:</span> {currentScenario.hasAffiliations}</div>
                  </div>
                </div>

                <div className="border-b pb-3">
                  <div className="font-bold text-gray-700 mb-2">Compliance Certifications</div>
                  <div className="space-y-1 text-xs">
                    <div><span className="font-semibold">Willing & Able:</span> {currentScenario.certifyWillingAndAble}</div>
                    <div><span className="font-semibold">Produce Documents:</span> {currentScenario.certifyProduceDocuments}</div>
                    <div><span className="font-semibold">Not Disqualified:</span> {currentScenario.certifyNotDisqualified}</div>
                    <div><span className="font-semibold">Process Agent:</span> {currentScenario.certifyUnderstandProcessAgent}</div>
                    <div><span className="font-semibold">Not Suspended:</span> {currentScenario.certifyNotUnderSuspension}</div>
                    <div><span className="font-semibold">Deficiencies Corrected:</span> {currentScenario.certifyDeficienciesCorrected}</div>
                  </div>
                </div>

                <div>
                  <div className="font-bold text-gray-700 mb-2">Electronic Signature</div>
                  <div className="text-xs">{currentScenario.electronicSignature}</div>
                </div>
              </div>
            </div>

            {/* RIGHT PANEL: All USDOT Questions with RPA Answers */}
            <div className="flex-1 overflow-y-auto p-6">
              <h3 className="text-lg font-bold text-gray-900 mb-4 sticky top-0 bg-gray-100 pb-2">
                USDOT Questions & RPA Answers Review
              </h3>

              {Object.entries(groupedFields).map(([category, fields]) => (
                <div key={category} className="mb-6">
                  <h4 className="text-md font-bold text-gray-800 mb-3 capitalize bg-gray-200 px-3 py-2 rounded">
                    {category === 'operation_classification' ? 'Operation Classification Summary' :
                     category === 'company_contact' ? 'Company Contact' :
                     category === 'operation_type' ? 'Operation Type Questions' :
                     category === 'vehicle_summary' ? 'Vehicle Summary' :
                     category === 'driver_summary' ? 'Driver Summary' :
                     category === 'affiliation' ? 'Affiliation with Others Summary' :
                     category === 'compliance_certifications' ? 'Compliance Certifications Summary' :
                     category === 'electronic_signature' ? 'Electronic Signature' :
                     category}
                  </h4>
                  
                  <div className="space-y-3">
                    {fields.map((field, idx) => {
                      const fieldIndex = fieldComparisons.indexOf(field);
                      const matches = JSON.stringify(field.expected) === JSON.stringify(field.actual);
                      
                      return (
                        <div 
                          key={field.fieldName}
                          className={`bg-white border-2 rounded-lg p-4 ${
                            field.isCorrect === null ? 'border-gray-300' :
                            field.isCorrect ? 'border-green-500 bg-green-50' :
                            'border-red-500 bg-red-50'
                          }`}
                        >
                          <div className="flex items-start justify-between mb-2">
                            <div className="flex-1">
                              <div className="font-bold text-gray-900 mb-2 text-sm leading-relaxed">{field.displayName}</div>
                              <div className="grid grid-cols-2 gap-2 text-sm">
                                <div>
                                  <div className="text-xs text-gray-600 font-semibold mb-1">Expected (from scenario):</div>
                                  <div className="font-mono text-xs bg-blue-50 p-2 rounded border">
                                    {typeof field.expected === 'object' ? JSON.stringify(field.expected, null, 2) : (field.expected || '(empty)')}
                                  </div>
                                </div>
                                <div>
                                  <div className="text-xs text-gray-600 font-semibold mb-1">RPA Filled:</div>
                                  <div className={`font-mono text-xs p-2 rounded border ${
                                    matches ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'
                                  }`}>
                                    {typeof field.actual === 'object' ? JSON.stringify(field.actual, null, 2) : (field.actual || '(empty)')}
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* Correct/Incorrect Buttons */}
                          <div className="flex space-x-2 mt-3">
                            <button
                              onClick={() => toggleFieldCorrectness(fieldIndex, true)}
                              className={`flex-1 px-4 py-2 rounded font-medium transition-all ${
                                field.isCorrect === true 
                                  ? 'bg-green-600 text-white' 
                                  : 'bg-gray-200 text-gray-700 hover:bg-green-100'
                              }`}
                            >
                              <CheckCircleIcon className="h-4 w-4 inline mr-1" />
                              Correct
                            </button>
                            <button
                              onClick={() => toggleFieldCorrectness(fieldIndex, false)}
                              className={`flex-1 px-4 py-2 rounded font-medium transition-all ${
                                field.isCorrect === false 
                                  ? 'bg-red-600 text-white' 
                                  : 'bg-gray-200 text-gray-700 hover:bg-red-100'
                              }`}
                            >
                              <XCircleIcon className="h-4 w-4 inline mr-1" />
                              Incorrect
                            </button>
                          </div>

                          {/* Auto-suggest based on match */}
                          {matches && field.isCorrect === null && (
                            <div className="mt-2 text-xs text-green-600 italic">
                              ✓ Values match - likely correct
                            </div>
                          )}
                          {!matches && field.isCorrect === null && (
                            <div className="mt-2 text-xs text-red-600 italic">
                              ⚠️ Values don't match - review carefully
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* BOTTOM PANEL: Training Feedback */}
          <div className="bg-white border-t-2 border-gray-300 p-6">
            <div className="max-w-6xl mx-auto">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h3 className="text-lg font-bold text-gray-900">Training Feedback</h3>
                  <p className="text-sm text-gray-600">
                    Provide detailed explanations for corrections - the RPA will learn from your feedback
                  </p>
                </div>
                <div className="text-right">
                  {!allReviewed && (
                    <div className="text-sm text-orange-600 font-medium">
                      ⚠️ Please review all {totalFields} questions before submitting
                    </div>
                  )}
                  {allReviewed && (
                    <div className={`text-sm font-bold ${
                      parseFloat(accuracy as string) >= 95 ? 'text-green-600' : 
                      parseFloat(accuracy as string) >= 80 ? 'text-yellow-600' : 
                      'text-red-600'
                    }`}>
                      Overall Accuracy: {accuracy}%
                    </div>
                  )}
                </div>
              </div>

              <textarea
                value={reviewFeedback}
                onChange={(e) => setReviewFeedback(e.target.value)}
                className="w-full h-32 px-4 py-3 border-2 border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 text-sm"
                placeholder="Provide detailed training feedback. For incorrect answers, explain:

• What the RPA should have answered instead
• Why it got it wrong (e.g., incorrect field mapping, wrong data source, logic error)
• How to fix it (e.g., 'interstateVehicles should sum all owned vehicles when interstateCommerce = Yes')

Example: 'The RPA incorrectly filled interstateVehicles as 0. It should be 5 (3 straight trucks + 2 tractors owned). The mapping logic needs to check if interstateCommerce=Yes, then sum vehicles.straightTrucks.owned + vehicles.truckTractors.owned.'"
              />

              {/* Action Buttons */}
              <div className="flex space-x-4 mt-4">
                <button
                  onClick={() => submitCorrection(correctCount === totalFields)}
                  disabled={!allReviewed}
                  className="flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed font-medium flex items-center justify-center"
                >
                  Submit Review & Load Next Scenario
                </button>
                <button
                  onClick={() => setShowReview(false)}
                  className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 font-medium"
                >
                  Back to Form
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Main render
  return (
    <div className="min-h-screen bg-gray-100">
      <div className="max-w-7xl mx-auto p-6">
        {/* Header */}
        <div className="mb-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            USDOT RPA Training Center
          </h1>
          <p className="text-gray-600">
            Watch the RPA agent fill out USDOT applications using real scenarios. Review and train for accuracy.
          </p>
        </div>

        {/* Session Stats */}
        {!isTraining && (
          <div className="grid grid-cols-3 gap-4 mb-6">
            <div className="bg-white rounded-lg shadow p-4">
              <div className="text-sm text-gray-600">Total Scenarios</div>
              <div className="text-2xl font-bold text-gray-900">{sessionStats.totalScenarios}</div>
            </div>
            <div className="bg-white rounded-lg shadow p-4">
              <div className="text-sm text-gray-600">Completed</div>
              <div className="text-2xl font-bold text-gray-900">{sessionStats.completed}</div>
            </div>
            <div className="bg-white rounded-lg shadow p-4">
              <div className="text-sm text-gray-600">Average Accuracy</div>
              <div className="text-2xl font-bold text-gray-900">{sessionStats.averageAccuracy.toFixed(1)}%</div>
            </div>
          </div>
        )}

        {/* Start Screen */}
        {!isTraining && !showReview && (
          <div className="bg-white rounded-lg shadow p-8 text-center">
            <DocumentTextIcon className="h-16 w-16 text-blue-600 mx-auto mb-4" />
            <h2 className="text-2xl font-semibold text-gray-900 mb-4">
              Start RPA Training Session
            </h2>
            <p className="text-gray-600 mb-6 max-w-2xl mx-auto">
              Load a scenario from the database and watch the RPA agent automatically fill out the USDOT application form. 
              The form looks exactly like the real FMCSA website. After completion, review the accuracy and provide training feedback.
            </p>

            {/* Speed Control */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Auto-Fill Speed:
              </label>
              <div className="flex justify-center space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="speed"
                    value="slow"
                    checked={autoFillSpeed === 'slow'}
                    onChange={(e) => setAutoFillSpeed(e.target.value as any)}
                    className="mr-2"
                  />
                  <span>Slow (1s per field)</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="speed"
                    value="normal"
                    checked={autoFillSpeed === 'normal'}
                    onChange={(e) => setAutoFillSpeed(e.target.value as any)}
                    className="mr-2"
                  />
                  <span>Normal (0.5s per field)</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="speed"
                    value="fast"
                    checked={autoFillSpeed === 'fast'}
                    onChange={(e) => setAutoFillSpeed(e.target.value as any)}
                    className="mr-2"
                  />
                  <span>Fast (0.2s per field)</span>
                </label>
              </div>
            </div>

            <button
              onClick={startTrainingSession}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 flex items-center space-x-2 mx-auto"
            >
              <PlayIcon className="h-5 w-5" />
              <span>Load Scenario & Start Training</span>
            </button>
          </div>
        )}

        {/* Training Interface */}
        {isTraining && !showReview && (
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
            {/* Scenario Panel (Left) */}
            <div className="lg:col-span-1">
              {renderScenarioPanel()}
              
              {/* RPA Controls */}
              <div className="bg-white border-2 border-gray-300 shadow p-4 mt-4">
                <h4 className="font-bold text-gray-900 mb-3">RPA Controls</h4>
                <button
                  onClick={autoFillAllSteps}
                  disabled={isAutoFilling}
                  className="w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed mb-2 flex items-center justify-center"
                >
                  {isAutoFilling ? (
                    <>
                      <RefreshIcon className="h-5 w-5 mr-2 animate-spin" />
                      Auto-Filling...
                    </>
                  ) : (
                    <>
                      <PlayIcon className="h-5 w-5 mr-2" />
                      Watch RPA Auto-Fill
                    </>
                  )}
                </button>
                <p className="text-xs text-gray-600 mt-2">
                  Click to watch the RPA agent automatically fill out all 9 steps of the application.
                </p>
              </div>
            </div>

            {/* FMCSA Form (Right) */}
            <div className="lg:col-span-3">
              {renderCurrentStep()}
            </div>
          </div>
        )}

        {/* Review Interface */}
        {showReview && renderReviewInterface()}
      </div>
    </div>
  );
};

export default USDOTRegistrationTrainingCenter;
